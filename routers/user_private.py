from aiogram import Router
from aiogram.filters import Command
from aiogram import types

from keyboards.mkp_main import mkp_main
from keyboards.mkp_all import create_guide_keyboard, create_lesson_keyboard, create_web_keyboard

from db import user


router_start = Router()


@router_start.message(Command('start'))
async def start_message(msg: types.Message):
    user_id = msg.from_user.id
    if await user.user_access_exists(user_id):
        await msg.answer(
            f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {msg.from_user.full_name}!</b>',
            parse_mode='html',
            reply_markup=mkp_main
        )
    else:
        await msg.answer(
            f'<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –í–∞—à ID: {msg.from_user.id}</b>',
            parse_mode='html'
        )


@router_start.message(lambda message: message.text == 'üìö –£–†–û–ö–ò')
async def handle_lessons(message: types.Message):
    keyboard = await create_lesson_keyboard()
    await message.answer(
        "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º —É—Ä–æ–∫–æ–≤.</b>",
        parse_mode='html',
        reply_markup=keyboard
    )


@router_start.message(lambda message: message.text == 'üíª –í–ï–ë–ò–ù–ê–†–´')
async def handle_webinars(message: types.Message):
    keyboard = await create_web_keyboard()
    await message.answer(
        "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≤–µ–±–∏–Ω–∞—Ä–æ–≤.</b>",
        parse_mode='html',
        reply_markup=keyboard
    )


@router_start.message(lambda message: message.text == 'üìù –ì–ê–ô–î–´')
async def handle_guides(message: types.Message):
    keyboard = await create_guide_keyboard()
    await message.answer(
        "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≥–∞–π–¥–æ–≤.</b>",
        parse_mode='html',
        reply_markup=keyboard
    )
