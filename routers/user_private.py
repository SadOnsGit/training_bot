from aiogram import Router
from aiogram.filters import Command
from aiogram import types

from keyboards.mkp_main import mkp_main
from keyboards.mkp_all import create_guide_keyboard, create_lesson_keyboard, create_web_keyboard

from db import user


router_start = Router()


@router_start.message(Command('start'))
async def start_message(msg: types.Message):
    user_id = msg.from_user.id
    if await user.user_access_exists(user_id):
        photo_url = 'https://i.imgur.com/8G38KWJ.jpeg'
        await msg.answer_photo(
            photo=photo_url,
            caption=(
                f'<b>–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}!</b>\n\n'
                '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å <i>–ú–ï–î–ò–ê–§–û–¢–û–ì–†–ê–§</i> üíò</b>\n\n'
                '–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:\n\n'
                
                '‚ú® <b>–£–†–û–ö–ò:</b> –û—Å–Ω–æ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏, –≤—ã–ø–æ–ª–Ω—è—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–æ–±–µ—Ä–µ—à—å —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n\n'
                
                'üé• <b>–í–ï–ë–ò–ù–ê–†–´:</b> –í—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ / –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–π–∫–µ—Ä–∞ –≤ –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –ø—Ä–æ—Ñ–∏.\n\n'
                
                'üìö <b>–ì–ê–ô–î–´:</b> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n'
                
                'üìä –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é —Ç–∞–±–ª–∏—Ü—É, –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –ª—É—á—à–µ —Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—Å–≤–æ–∏—Ç—å, –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å—Å—è!\n\n'
                
                '<b>–•–æ—Ä–æ—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è!</b>\n'
                'xo xo, foxikris üíã'
            ),
            parse_mode='html',
            reply_markup=mkp_main
        )
    else:
        await msg.answer(
            f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π ID –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @foxikrisss\n\n–í–∞—à ID: `{user_id}`',
            parse_mode='MARKDOWN'
        )


@router_start.message(lambda message: message.text == 'üìö –£–†–û–ö–ò')
async def handle_lessons(message: types.Message):
    user_id = message.from_user.id
    if await user.user_access_exists(user_id):
        keyboard = await create_lesson_keyboard()
        await message.answer(
            "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º —É—Ä–æ–∫–æ–≤.</b>",
            parse_mode='html',
            reply_markup=keyboard
        )


@router_start.message(lambda message: message.text == 'üíª –í–ï–ë–ò–ù–ê–†–´')
async def handle_webinars(message: types.Message):
    user_id = message.from_user.id
    if await user.user_access_exists(user_id):
        keyboard = await create_web_keyboard()
        await message.answer(
            "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≤–µ–±–∏–Ω–∞—Ä–æ–≤.</b>",
            parse_mode='html',
            reply_markup=keyboard
        )


@router_start.message(lambda message: message.text == 'üìù –ì–ê–ô–î–´')
async def handle_guides(message: types.Message):
    user_id = message.from_user.id
    if await user.user_access_exists(user_id):
        keyboard = await create_guide_keyboard()
        await message.answer(
            "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≥–∞–π–¥–æ–≤.</b>",
            parse_mode='html',
            reply_markup=keyboard
        )
